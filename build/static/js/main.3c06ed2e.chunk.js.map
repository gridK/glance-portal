{"version":3,"sources":["Styles/js/style-sheet.js","Components/Heading.js","Components/GeneralInfo.js","Components/ShelfInfo.js","Components/DetectionImages.js","Components/Document.js","Styles/js/Pdf-Font-loader.js","Components/PDFView.js","Components/SideNav.jsx","Components/Utilities/MiniViewBtn.js","Components/Utilities/FullWidthCard.js","Components/Pages/RecordsView.js","Components/Pages/AuditList.js","Components/Pages/ShelfList.js","Components/ShelfPDFComponents/ShelfGeneralInfo.js","Components/ShelfPDFComponents/ShelfDocument.js","Components/ShelfPDF.js","App.js","index.js"],"names":["styles","StyleSheet","create","body","paddingTop","paddingBottom","paddingHorizontal","title","fontFamily","fontWeight","fontSize","marginBottom","row","flexDirection","logo","height","width","subHeadingBold","textAlign","subHeading","headingBar","marginVertical","backgroundColor","textBox","alignItems","paddingRight","text","infoPart","paddingLeft","subTitle","twentyBottomMargin","description","marginLeft","infoRow","flexWrap","infoCard","infoCardHeader","infoCardValue","marginTop","infoCardDescription","image","marginHorizontal","DetectedimageView","Heading","props","DateString","String","scanDate","split","ReportIdString","reportId","padStart","fixed","style","Styles","src","recipient","InfoRow","undefined","label","value","GeneralInfo","currentMonth","parseInt","Products","productNames","shelfNumbers","brandName","storeName","map","index","manufacturerName","numberOfFacings","categoryName","ShelfInfoCard","wrap","header","ShelfInfo","console","log","numberOfFacingsAvailableOnshelf","numberOfFacingsFromSameCategory","shelfPercentage","toFixed","toString","categoryPercentage","DetectionImages","ImageInfo","ImagesInfo","Image","shelf","HeaderimageView","URL","createObjectURL","detectedProducts","product","indexing","color","labels","productName","Documents","info","object","size","Font","register","family","fonts","PDFView","useState","error","setError","isLoaded","setIsLoaded","items","setItems","images","setImage","Pimages","params","useParams","useEffect","fetch","then","res","json","result","requests","detectedProductsOnShelf","imageUrl","shelfImageUrl","isGrouped","productCoords","coordinateOnShelf","a","method","headers","responseType","JSON","stringify","response","blob","push","Promise","all","Row","className","navList","img","item","pages","NavItem","to","activeClassName","SideNav","navItem","MiniViewBtn","type","value_link","FullWidthCard","Col","xl","label_A","lg","value_A","label_B","noGutters","value_B","label_C","value_C","label_D","value_D","minibtn","RecordsView","page","Container","fluid","report","generatedDate","id","input","location","scandate","numberOfShelves","AuditList","ShelfList","inputId","number","rowNumber","numberOfSKU","sumOfproductsOnShelf","skuName","skuNumberOfFacings","ShelfGeneralInfo","SKUs","rowNumbers","manufacturers","numberOfSKUs","ShelfDocument","shelfNumber","manufacturerNames","skUs","shelvesImages","ShelfPDF","setlabels","colors","length","renderLabelColor","intdata","App","path","class","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c06ed2e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {StyleSheet} from '@react-pdf/renderer';\r\n\r\nconst styles = StyleSheet.create({\r\n    body: {\r\n        paddingTop: 35,\r\n        paddingBottom: 65,\r\n        paddingHorizontal: 45,\r\n    },\r\n    title:{\r\n        fontFamily: 'Quicksand',\r\n        fontWeight: 'semibold',\r\n        fontSize: 18,\r\n        marginBottom: 20,\r\n    },\r\n    row:{\r\n        flexDirection: 'row',\r\n    },\r\n    logo:{\r\n        height: 70,\r\n        width: 130,\r\n    },\r\n    subHeadingBold:{\r\n        fontFamily: 'Quicksand',\r\n        fontWeight: 'bold',\r\n        fontSize: 11,\r\n        marginBottom: 6,\r\n        textAlign: 'right',\r\n    },\r\n    subHeading:{\r\n        fontFamily: 'Quicksand',\r\n        fontSize: 11,\r\n        textAlign: 'right',\r\n    },\r\n    headingBar:{\r\n        marginVertical: 10,\r\n        marginBottom: 10,\r\n        backgroundColor: '#4A90E2',\r\n        width: '100%',\r\n        height: 10,\r\n\r\n    },\r\n    textBox:{\r\n        alignItems: 'baseline',\r\n        paddingRight: 140,\r\n        height:'100%',\r\n        width:'100%',\r\n        paddingTop: 20,\r\n    },\r\n    text:{\r\n        fontFamily: 'Quicksand',\r\n        fontSize: 9,\r\n    },\r\n    infoPart:{\r\n        paddingLeft: 20,\r\n        paddingRight: 20,\r\n        marginBottom: 50,\r\n    },\r\n    subTitle:{\r\n        fontFamily: 'Quicksand',\r\n        fontWeight: 'medium',\r\n        fontSize: 12,\r\n    },\r\n    twentyBottomMargin:{\r\n        marginBottom: 20,\r\n    },\r\n    description:{\r\n        marginLeft: 10,\r\n        fontFamily: 'Quicksand',\r\n        fontSize: 12,\r\n    },\r\n    infoRow:{\r\n        flexDirection: 'row',\r\n        marginBottom: 10,\r\n        flexWrap: 'wrap',\r\n    },\r\n    infoCard:{\r\n        marginLeft: 30,\r\n        textAlign: 'center',    \r\n        marginLeft: 30,\r\n    },\r\n    infoCardHeader:{\r\n        fontFamily: 'Quicksand',\r\n        fontWeight: 'medium',\r\n        fontSize: 14,\r\n        width: '40%',\r\n        \r\n    },\r\n    infoCardValue:{\r\n        fontFamily: 'Quicksand',\r\n        fontWeight: 'semibold',\r\n        fontSize: 20,\r\n        width: '40%',\r\n        marginTop: 10,\r\n    },\r\n    infoCardDescription:{\r\n        fontFamily: 'Quicksand',\r\n        fontSize: 12,\r\n        width: '40%',\r\n        marginTop: 10,\r\n    },\r\n    marginLeft:{\r\n        marginLeft: 170,\r\n    },\r\n    image: {\r\n        marginVertical: 15,\r\n        marginHorizontal: 100,\r\n    },\r\n    DetectedimageView: {\r\n        marginTop: 10,\r\n    }, \r\n});\r\n\r\nexport default styles; ","import React from 'react';\r\nimport { Page, Text, View, Document, StyleSheet, Image } from '@react-pdf/renderer';\r\nimport Styles from '../Styles/js/style-sheet';\r\n\r\nfunction Heading(props){\r\n    const DateString = String(props.scanDate).split(\"/\")\r\n\r\n    const ReportIdString = String(props.reportId).padStart(2,'0')\r\n    return(\r\n        <View fixed>\r\n            <View style={Styles.row}>\r\n                <Image style={Styles.logo} src=\"../img/glance_logo.png\"/>\r\n                <View style={Styles.textBox} >\r\n                    <Text style={Styles.subHeadingBold}>Recipient: {props.recipient}</Text>\r\n                    <Text style={Styles.subHeading}>Share of Shelf Report by GLANCE</Text>\r\n                    <Text style={Styles.subHeading}>Report No.: {DateString[0]+DateString[1]+DateString[2]+ReportIdString}</Text>\r\n                </View>\r\n            </View>\r\n            <View style={Styles.headingBar}></View>\r\n        </View>\r\n    );\r\n}\r\n\r\nexport default Heading;","import React from 'react';\r\nimport { Page, Text, View, Document, StyleSheet, Image } from '@react-pdf/renderer';\r\nimport Styles from '../Styles/js/style-sheet';\r\n\r\nfunction GeneralInfo(props){\r\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n    ];\r\n    const DateString = String(props.scanDate).split(\"/\")\r\n    const currentMonth = monthNames[parseInt(DateString[0])]\r\n    const Products = props.productNames.split(\",\")\r\n\r\n    return (\r\n        <View style={Styles.infoPart}>\r\n            <Text style={Styles.subTitle}>\r\n                Report for {currentMonth+\" \"+ DateString[2]} \r\n            </Text>\r\n            <View style={Styles.twentyBottomMargin}></View>\r\n            <InfoRow label=\"Shelf No.\" value={props.shelfNumbers}/>\r\n            <InfoRow label=\"Brand\" value={props.brandName}/>\r\n            <InfoRow label=\"Store\" value={props.storeName}/>\r\n            <InfoRow label=\"Products\" value={Products[0]}/>\r\n            {Products.map((value, index) => {\r\n                return (<>{ index > 0 ?<InfoRow value={value}/> : null}</>);\r\n            })}\r\n            <InfoRow label=\"Manufacturer\" value={props.manufacturerName} />\r\n            <InfoRow label=\"Number of facings\" value={props.numberOfFacings}/>\r\n            <InfoRow label=\"Category\" value={props.categoryName} />\r\n            <InfoRow label=\"Date of scan\" value={props.scanDate}/>\r\n        </View>\r\n    );\r\n}\r\n\r\nfunction InfoRow(props) {\r\n    return (\r\n        <View style={Styles.infoRow}>\r\n        {    \r\n            (props.label != undefined) ?\r\n                <Text style={Styles.subTitle} >\r\n                    {props.label+\":\"}\r\n                </Text>\r\n            : <Text >           </Text>\r\n        }    \r\n            <Text style={Styles.description} >\r\n                {props.value}\r\n            </Text>\r\n        </View>\r\n    );\r\n}\r\n\r\nexport default GeneralInfo;","import React from 'react';\r\nimport { Page, Text, View, Document, StyleSheet, Image } from '@react-pdf/renderer';\r\nimport Styles from '../Styles/js/style-sheet';\r\n\r\nfunction ShelfInfo(props) {\r\n    console.log(props.numberOfFacingsAvailableOnshelf)\r\n    console.log(props.numberOfFacingsFromSameCategory)\r\n    const shelfPercentage = ((props.numberOfFacings / props.numberOfFacingsAvailableOnshelf) * 100).toFixed(2).toString();\r\n    const categoryPercentage = ((props.numberOfFacings / props.numberOfFacingsFromSameCategory) * 100).toFixed(2).toString();\r\n    return (\r\n        <View style={Styles.row} wrap={true} >\r\n            <ShelfInfoCard \r\n                header=\"Based on products on the same shelf\" \r\n                value={shelfPercentage+\"%\"}\r\n                description={'From '+ props.numberOfFacingsAvailableOnshelf+' facings products'}    \r\n                />\r\n            <ShelfInfoCard />\r\n            <View  style={Styles.marginLeft}/>\r\n            <ShelfInfoCard \r\n                header=\"Based on products of same category\" \r\n                value={categoryPercentage+\"%\"}\r\n                description={'From ' + props.numberOfFacingsFromSameCategory +' facings products'}    \r\n                />\r\n            <ShelfInfoCard />\r\n        </View>\r\n    );\r\n}\r\n\r\nfunction ShelfInfoCard(props){\r\n    return (\r\n    <View style={Styles.infoCard} wrap={true} >\r\n        <Text style={Styles.infoCardHeader} wrap={true}>\r\n            {props.header}\r\n        </Text>\r\n        <Text style={Styles.infoCardValue} >\r\n            {props.value}\r\n        </Text>\r\n        <Text style={Styles.infoCardDescription}>\r\n            {props.description}\r\n        </Text>\r\n    </View>\r\n    );\r\n}\r\n\r\nexport default ShelfInfo;","import React,  { useState , useEffect, useMemo} from 'react';\r\nimport Styles from '../Styles/js/style-sheet';\r\n\r\nimport { Page, Text, View, Image, StyleSheet } from '@react-pdf/renderer';\r\n\r\nfunction DetectionImages(props){\r\n   // var result = Object.keys(images).map((key) => [Number(key), images[key]]);\r\n   console.log(props.ImageInfo )\r\n   return(\r\n       <View style={Styles.DetectedimageView}>\r\n           { (props.ImagesInfo != undefined) ?\r\n               props.Image.map( (shelf,index) => \r\n               <>\r\n                  {\r\n                      (index == 0) ?\r\n                        <View>\r\n                            <View wrap={false} >\r\n                                <Text style={Styles.HeaderimageView}>Detected Shelves</Text>\r\n                                <Image \r\n                                    style={Styles.image}\r\n                                    src={URL.createObjectURL(shelf)}\r\n                                />\r\n                                \r\n                            </View>\r\n                                {\r\n                                props.ImagesInfo[index].detectedProducts.map((product,indexing) =>\r\n                                    <Text style ={Styles.description} >\r\n                                        <Text style = {{color: props.labels[index][indexing],fontSize:18 }}>\r\n                                        • \r\n                                        </Text> \r\n                                        {(\"  \"+product.productName ) }\r\n                                    </Text>\r\n                                )\r\n                                }\r\n                        </View>\r\n                       :\r\n                        <View >\r\n                            <Image \r\n                                style={Styles.image}\r\n                                src={URL.createObjectURL(shelf)}\r\n                            />\r\n                            {\r\n                            props.ImagesInfo[index].detectedProducts.map((product,indexing) =>\r\n                                <Text style ={Styles.description} >\r\n                                       <Text style = {{color: props.labels[index][indexing],fontSize:18 }}>\r\n                                       • \r\n                                       </Text> \r\n                                       {(\"  \"+product.productName ) }\r\n                                </Text>\r\n                            )\r\n                            }\r\n                        </View>\r\n                  }\r\n                </>\r\n               )\r\n             :\r\n               props.Image.map(shelf => \r\n                   <Image \r\n                       style={Styles.image}\r\n                       src={URL.createObjectURL(shelf)}\r\n                   />\r\n               )\r\n           }\r\n       </View>\r\n);\r\n\r\n}   \r\n\r\nexport default DetectionImages;","import React from 'react';\r\nimport { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\r\n\r\nimport Styles from '../Styles/js/style-sheet';\r\n\r\nimport Heading from './Heading';\r\nimport GeneralInfo from './GeneralInfo';\r\nimport ShelfInfo from './ShelfInfo';\r\nimport DetectionImages from './DetectionImages';\r\n\r\nfunction Documents(props){\r\n    const info = props.object\r\n\r\n    return(\r\n        <Document>\r\n            <Page size=\"A4\" style={Styles.body} >\r\n                <Heading \r\n                    recipient={info.manufacturerName}\r\n                    scanDate={info.scanDate}\r\n                    reportId={info.reportId}\r\n                />\r\n                <Text style={Styles.title} >\r\n                    {info.brandName}\r\n                </Text>\r\n                <GeneralInfo \r\n                    scanDate={info.scanDate}\r\n                    shelfNumbers={info.shelfNumbers}\r\n                    brandName={info.brandName}\r\n                    storeName={info.storeName}\r\n                    manufacturerName={info.manufacturerName}\r\n                    categoryName={info.categoryName}\r\n                    productNames={info.productNames}\r\n                    numberOfFacings={info.numberOfFacings}\r\n                />\r\n                <ShelfInfo \r\n                    numberOfFacings={info.numberOfFacings}\r\n                    numberOfFacingsAvailableOnshelf={info.numberOfFacingsAvailableOnshelf}\r\n                    numberOfFacingsFromSameCategory={info.numberOfFacingsFromSameCategory}\r\n                />\r\n                <DetectionImages Image={props.Image}/>\r\n            </Page>\r\n        </Document>\r\n    );\r\n    \r\n}\r\n\r\nexport default Documents;","import {Font} from '@react-pdf/renderer'\r\n\r\nFont.register({ \r\n    family: 'Quicksand', \r\n    fonts: [\r\n    { \r\n        src: '../Fonts/Quicksand-Regular.ttf' \r\n    }, // font-style: normal, font-weight: normal\r\n    { \r\n        src: '../Fonts/Quicksand-Bold.ttf' , \r\n        fontWeight: 'bold' \r\n    },\r\n    { \r\n        src: '../Fonts/Quicksand-Light.ttf' , \r\n        fontWeight: 'light'\r\n    },\r\n    { \r\n        src: '../Fonts/Quicksand-Medium.ttf' , \r\n        fontWeight: 'medium'\r\n    },\r\n    { \r\n        src: '../Fonts/Quicksand-SemiBold.ttf' , \r\n        fontWeight: 'semibold'\r\n    },\r\n   ]\r\n});","import React, { useState , useEffect, useMemo} from 'react';\r\nimport MyDocument from './Document';\r\nimport { PDFViewer, PDFDownloadLink} from '@react-pdf/renderer';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport '../Styles/js/Pdf-Font-loader';\r\nimport {\r\n  useParams\r\n} from \"react-router-dom\";\r\nfunction PDFView(props)  {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n    const [images, setImage] = useState([]);\r\n    const Pimages = []\r\n    const  params  = useParams();\r\n    console.log(params.reportId)\r\n    useEffect(() => {\r\n      fetch(`https://glance-api.azurewebsites.net/reportId=${params.reportId}`)\r\n        .then(res => res.json())\r\n        .then(    \r\n          (result) => {\r\n            setItems(result);\r\n            \r\n            // const reducer = (accumulator, currentValue) => accumulator.concat(currentValue.coordinateOnShelf);\r\n            const intdata = result.detectedProductsOnShelf.map( shelf => ({\r\n              imageUrl: shelf.shelfImageUrl , isGrouped: false,\r\n              productCoords: shelf.detectedProducts.map(product => product.coordinateOnShelf)\r\n              \r\n            }\r\n            ) )\r\n            const requests = intdata.map(async image => {\r\n               return fetch(\"http://127.0.0.1:4000/highlight-image\",{\r\n                  method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n                  headers: {\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                  responseType: 'blob',\r\n                  body: JSON.stringify(image) // body data type must match \"Content-Type\" header\r\n                  })\r\n                  // implement body\r\n                  .then(response => response.blob())\r\n                    .then(    \r\n                      (response) => {\r\n                        Pimages.push(response);\r\n                      },\r\n                      (error) => {\r\n                        setError(error);\r\n                        setIsLoaded(false);\r\n                      }\r\n                    )\r\n                });\r\n            return Promise.all(requests).then(() => {\r\n              console.log(\"Code is here\");\r\n              console.log(Pimages)\r\n              console.log(error)\r\n              setImage(Pimages)\r\n              setIsLoaded(true);\r\n            })\r\n          },\r\n          (error) => {\r\n            setError(error);\r\n            setIsLoaded(false);\r\n          }\r\n        )\r\n    }, [])\r\n    \r\n    return ( \r\n      <>\r\n      {isLoaded ?\r\n          <PDFViewer height=\"950px\" width=\"100%\">\r\n              <MyDocument Image={images} object={items}/>\r\n          </PDFViewer>\r\n      : \r\n      \r\n        <Row className=\"d-flex justify-content-center align-items-center\" style={{height:'100%'}}>\r\n          <h1>Generating report...</h1>\r\n        </Row>\r\n      }\r\n      </>\r\n        );\r\n    \r\n}\r\n\r\nexport default PDFView;","import React from \"react\";\r\nimport '../Styles/glance-portal-styling.scss';\r\nimport App from '../App';\r\nimport {NavLink} from 'react-router-dom'\r\nconst navList = [\r\n    {img: '/img/stack.svg',item: \"Manufacturer\", pages: '/manufacturer'},\r\n    {img: '/img/audit.svg',item:\"Auditor\" , pages: '/auditor'}\r\n]\r\n\r\n\r\nfunction NavItem(props) {\r\n    return (\r\n        <div>\r\n            <NavLink to={props.pages} activeClassName=\"active\" className=\"side-nav-item\">\r\n                    <img src={props.img} className=\"side-nav-item-icon\" ></img>\r\n                    <p className=\"side-nav-item-text\" >{props.item}</p>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction SideNav(props) {\r\n    return (\r\n        <div className=\"side-nav\">\r\n            <h1 className=\"side-nav-header\">GLANCE</h1>\r\n            {navList.map((navItem) => \r\n                <NavItem img={navItem.img} item={navItem.item} pages={navItem.pages}/> \r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SideNav;","import React from 'react';\r\nimport '../../Styles/glance-portal-styling.scss';\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nfunction MiniViewBtn(props) {\r\n    return(\r\n        <>\r\n        { props.type == \"view\" ?\r\n            <NavLink to={props.value_link} className=\"mini-btn view-btn\">\r\n                <h5>View</h5>\r\n                <img src=\"/img/google-docs.svg\"></img>\r\n            </NavLink>\r\n          : \r\n            <NavLink to={props.value_link} className=\"mini-btn view-btn\">\r\n                <h5>View</h5>\r\n                <img src=\"/img/chevron-pointing.svg\"></img>\r\n            </NavLink>\r\n        }\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default MiniViewBtn;","import React from 'react';\r\nimport { Col } from 'react-bootstrap';\r\nimport Row from 'react-bootstrap/Row';\r\nimport '../../Styles/glance-portal-styling.scss';\r\nimport MiniViewBtn from '../Utilities/MiniViewBtn';\r\n\r\n\r\nfunction FullWidthCard(props) {\r\n    return(\r\n        <div className=\"full-width-card-box mt-3\">\r\n            <Row className=\"full-width-card-inner-padding\">\r\n                <Col className=\"full-width-card-partial\" xl=\"3\">\r\n                    <div className=\"mini-card-text-big\">\r\n                        <p>{props.label_A}</p>\r\n                        <Row className=\"mini-card-value-text\" >\r\n                            <Col  lg=\"auto\">\r\n                                <h2 className=\"text-truncate\">{props.value_A}</h2>\r\n                            </Col>\r\n                        </Row>\r\n                        \r\n                    </div>\r\n                </Col>\r\n                <Col xl=\"2\" className=\" mr-5\">\r\n                    <Row className=\"full-width-inner-padding\">\r\n                        {/* <img src={props.icon} className=\"mini-card-icon\"></img> */}\r\n                        <div className=\"mini-card-text-big\">\r\n                            <p>{props.label_B}</p>\r\n                            <Row className=\"mini-card-value-text\" noGutters=\"true\">\r\n                                <Col  lg=\"auto\">\r\n                                    <h4>{props.value_B}</h4>\r\n                                </Col>\r\n                                {/* <Col>\r\n                                    <img src={props.iconUnit} ></img>\r\n                                </Col> */}\r\n                            </Row>\r\n                            \r\n                        </div>\r\n                    </Row>\r\n                </Col>\r\n                <Col  className=\" col-xl-2-5\">\r\n                    <Row className=\"full-width-inner-padding\">\r\n                        {/* <img src={props.icon} className=\"mini-card-icon\"></img> */}\r\n                        <div className=\"mini-card-text-big\">\r\n                            <p>{props.label_C}</p>\r\n                            <Row className=\"mini-card-value-text\" noGutters=\"true\">\r\n                                <Col  lg=\"auto\" >\r\n                                    <h4>{props.value_C}</h4>\r\n                                </Col>\r\n                                {/* <Col  >\r\n                                    <img src={props.iconUnit} className=\"align-self-start\" ></img>\r\n                                </Col> */}\r\n                            </Row>\r\n                        </div>\r\n                    </Row>\r\n                </Col>\r\n                <Col className=\"\">\r\n                    <div className=\"mini-card-text-big\">\r\n                        <p>{props.label_D}</p>\r\n                        <Row className=\"mini-card-value-text\" noGutters=\"true\">\r\n                            <Col  lg=\"auto\">\r\n                                <h4>{props.value_D}</h4>\r\n                            </Col>\r\n                        </Row>\r\n                        \r\n                    </div>\r\n                </Col>\r\n                <Col className=\"full-width-card-partial justify-content-center\">\r\n                    { props.minibtn == \"view-shelfs\" ?\r\n                        <MiniViewBtn value_link={props.value_link} type=\"view-shelfs\"/>\r\n                      :\r\n                        <MiniViewBtn value_link={props.value_link}  type=\"view\"/>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FullWidthCard;","import React, { useState , useEffect, useMemo} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Breadcrumb from 'react-bootstrap/Breadcrumb'\r\nimport '../../Styles/glance-portal-styling.scss';\r\nimport FullWidthCard from '../Utilities/FullWidthCard';\r\nimport FilterDropDown from '../Utilities/FilterDropDown';\r\n\r\nfunction RecordsView(props){\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n    useEffect(() => {\r\n        if(props.page === \"home\")\r\n        {\r\n            fetch(\"https://localhost:5001/MaufacturerList\")\r\n            .then(res => res.json())\r\n            .then(    \r\n                (result) => {\r\n                setItems(result);\r\n                setIsLoaded(true);\r\n                console.log(result)\r\n                },\r\n                (error) => {\r\n                    setError(error);\r\n                    setIsLoaded(false);\r\n                }\r\n            )\r\n            console.log(items)\r\n        }\r\n        else if(props.page === \"audit\")\r\n        {\r\n            fetch(\"https://localhost:5001/AuditorList\")\r\n            .then(res => res.json())\r\n            .then(    \r\n                (result) => {\r\n                setItems(result);\r\n                setIsLoaded(true);\r\n                console.log(result)\r\n                },\r\n                (error) => {\r\n                    setError(error);\r\n                    setIsLoaded(false);\r\n                }\r\n            )\r\n            console.log(items)\r\n        }\r\n    },[])\r\n    return(\r\n        <Container fluid >\r\n            <div className=\"view-bread-position-fixed\">\r\n            { props.page === 'home' ?\r\n                <div>\r\n                    <h5 className=\"main-title\">Share of Shelf</h5>\r\n                    <h5 className=\"main-sub-title\">by Manufacturer</h5>\r\n                </div>\r\n             :props.page === 'audit' ?\r\n                <div>\r\n                    <h5 className=\"main-title\">Share of Shelf</h5>\r\n                    <h5 className=\"main-sub-title\">by Auditing</h5>\r\n                </div>\r\n             :\r\n                <div>\r\n                    <h5 className=\"main-title\">Share of Shelf</h5>\r\n                    <h5 className=\"main-sub-title\">by shelf</h5>\r\n                </div>\r\n            }\r\n            </div>\r\n            <div className=\"main-inspection-record-view\" >\r\n            { props.page === 'home' ?\r\n            <>\r\n                {\r\n                  items.map( report =>\r\n                            <FullWidthCard \r\n                        label_A=\"Manufacturer\" \r\n                        value_A={report.manufacturerName}\r\n                        label_B=\"Location\" \r\n                        value_B=\"Tesco lotus\" \r\n                        label_C=\"Scan date\" \r\n                        value_C={report.generatedDate}\r\n                        label_D=\"Number of Facings\" \r\n                        value_D={report.numberOfFacings}\r\n                        value_link={\"/pdf/\"+report.id}\r\n                        /> \r\n                    )\r\n                }\r\n            </>\r\n            : props.page === 'audit' ?\r\n            <>\r\n                {\r\n                  items.map( input =>\r\n                            <FullWidthCard \r\n                        label_A=\"Audit No.\" \r\n                        value_A={input.id}\r\n                        label_B=\"Location\" \r\n                        value_B={input.location} \r\n                        label_C=\"Scan date\" \r\n                        value_C={input.scandate} \r\n                        label_D=\"Number of Facings\" \r\n                        value_D={input.numberOfShelves}\r\n                        value_link={\"/shelflist/\"+input.id}\r\n                        /> \r\n                    )\r\n                }\r\n            </>\r\n            :\r\n            <>\r\n                {\r\n                  items.map( input =>\r\n                            <FullWidthCard \r\n                        label_A=\"Audit No.\" \r\n                        value_A={input.id}\r\n                        label_B=\"Location\" \r\n                        value_B={input.location} \r\n                        label_C=\"Scan date\" \r\n                        value_C={input.scandate} \r\n                        label_D=\"Number of Facings\" \r\n                        value_D={input.numberOfShelves}\r\n                        minibtn=\"view-shelfs\"\r\n                        /> \r\n                    )\r\n                }\r\n            </>\r\n            }\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\nexport default RecordsView;","import React, { useState , useEffect, useMemo} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Breadcrumb from 'react-bootstrap/Breadcrumb'\r\nimport '../../Styles/glance-portal-styling.scss';\r\nimport FullWidthCard from '../Utilities/FullWidthCard';\r\nimport FilterDropDown from '../Utilities/FilterDropDown';\r\n\r\nfunction AuditList(props){\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n    useEffect(() => {\r\n            fetch(\"https://localhost:5001/AuditorList\")\r\n            .then(res => res.json())\r\n            .then(    \r\n                (result) => {\r\n                setItems(result);\r\n                setIsLoaded(true);\r\n                console.log(result)\r\n                },\r\n                (error) => {\r\n                    setError(error);\r\n                    setIsLoaded(false);\r\n                }\r\n            )\r\n    },[])\r\n    return(\r\n        <Container fluid >\r\n            <div className=\"view-bread-position-fixed\">\r\n                <div>\r\n                    <h5 className=\"main-title\">Share of Shelf</h5>\r\n                    <h5 className=\"main-sub-title\">by Auditing</h5>\r\n                </div>\r\n            </div>\r\n            <div className=\"main-inspection-record-view\" >\r\n                {\r\n                  items.map( input =>\r\n                            <FullWidthCard \r\n                        label_A=\"Audit No.\" \r\n                        value_A={input.id}\r\n                        label_B=\"Location\" \r\n                        value_B={input.location} \r\n                        label_C=\"Scan date\" \r\n                        value_C={input.scandate} \r\n                        label_D=\"Number of Shelves\" \r\n                        value_D={input.numberOfShelves}\r\n                        value_link={\"/shelflist/\"+input.id}\r\n                        minibtn = \"view-shelfs\"\r\n                        /> \r\n                    )\r\n                }\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\nexport default AuditList;","import React, { useState , useEffect, useMemo} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport '../../Styles/glance-portal-styling.scss';\r\nimport FullWidthCard from '../Utilities/FullWidthCard';\r\nimport {\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\nfunction ShelfList(props){\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n    const  params  = useParams();\r\n    useEffect(() => {\r\n            fetch(`https://localhost:5001/shelflist/inputId=${params.inputId}`)\r\n            .then(res => res.json())\r\n            .then(    \r\n                (result) => {\r\n                setItems(result);\r\n                setIsLoaded(true);\r\n                console.log(result)\r\n                },\r\n                (error) => {\r\n                    setError(error);\r\n                    setIsLoaded(false);\r\n                }\r\n            )\r\n    },[])\r\n    return(\r\n        <Container fluid >\r\n            <div className=\"view-bread-position-fixed\">\r\n                <div>\r\n                    <h5 className=\"main-title\">Share of Shelf</h5>\r\n                    <h5 className=\"main-sub-title\">for Auditing No. {params.inputId}</h5>\r\n                </div>\r\n            </div>\r\n            <div className=\"main-inspection-record-view\" >\r\n                {\r\n                  items.map( input =>\r\n                            <FullWidthCard \r\n                        label_A=\"Shelf No.\" \r\n                        value_A={input.number}\r\n                        label_B=\"Row No.\" \r\n                        value_B={input.rowNumber} \r\n                        label_C=\"Number of SKUs\" \r\n                        value_C={input.numberOfSKU} \r\n                        label_D=\"Number of facings\" \r\n                        value_D={input.sumOfproductsOnShelf}\r\n                        value_link={\"/shelfpdf/\"+params.inputId+\"/\"+input.number}\r\n                        /> \r\n                    )\r\n                }\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\nexport default ShelfList;","import React from 'react';\r\nimport { Page, Text, View, Document, StyleSheet, Image } from '@react-pdf/renderer';\r\nimport '../../Styles/glance-portal-styling.scss';\r\nimport Styles from '../../Styles/js/style-sheet';\r\nfunction ShelfGeneralInfo(props){\r\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n    ];\r\n    const DateString = String(props.scanDate).split(\"/\")\r\n    const currentMonth = monthNames[parseInt(DateString[0])]\r\n    const SKUs =  props.SKUs\r\n    return (\r\n        <View style={Styles.infoPart} >\r\n            {/* <Text style={Styles.subTitle}>\r\n                Report for {currentMonth+\" \"+ DateString[2]} \r\n            </Text> */}\r\n            <View style={Styles.twentyBottomMargin}></View>\r\n            <InfoRow label=\"Row No.\" value={props.rowNumbers}/>\r\n            <InfoRow label=\"Store\" value={props.storeName}/>\r\n            <InfoRow label=\"Manufacturers\" value={props.manufacturers} type=\"multiple\"/>\r\n            {/* {props.manufacturers.map((value, index) => {\r\n                return (<>{ index > 0 ?<InfoRow value={value}/> : null}</>);\r\n            })} */}\r\n            <InfoRow label=\"Date of auditing\" value={props.scanDate}/>\r\n            <InfoRow label=\"Number of SKUs\" value={props.numberOfSKUs}/>\r\n            <InfoRow label=\"Number of facings\" value={props.numberOfFacings}/> \r\n            <InfoRow label=\"SKUs\" value={props.SKUs[0]} type=\"SKU\"/>\r\n            {props.SKUs.map((value, index) => {\r\n                console.log(value);\r\n                return (<>{ index > 0 ?\r\n                <>\r\n                    <InfoRow value={value} type=\"SKU\"/>\r\n                </>\r\n                : null}</>);\r\n            })}\r\n            \r\n        </View>\r\n    );\r\n}\r\n\r\nfunction InfoRow(props) {\r\n    return (\r\n        <View style={Styles.infoRow}>\r\n        {    \r\n            (props.label != undefined) ?\r\n                <Text style={Styles.subTitle} >\r\n                    {props.label+\":\"}\r\n                </Text>\r\n            : <Text ></Text>\r\n        }    \r\n        {\r\n            (props.type === \"multiple\") ?\r\n                <Text style={Styles.description} >\r\n                    {\r\n                    props.value.map( (res) =>\r\n                       ( res+\", \")\r\n                    )\r\n                    }\r\n                </Text>\r\n            : (props.type === \"SKU\") ?\r\n                <Text style={Styles.description} >\r\n                    {props.value.skuName+\"  ( \"+props.value.skuNumberOfFacings+\" facings )\"}\r\n                </Text>\r\n            :\r\n                <Text style={Styles.description} >\r\n                    {props.value}\r\n                </Text>\r\n        }\r\n        </View>\r\n        \r\n    );\r\n}\r\n\r\nexport default ShelfGeneralInfo;","import React from 'react';\r\nimport { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\r\nimport Styles from '../../Styles/js/style-sheet';\r\n\r\nimport Heading from '../Heading';\r\nimport DetectionImages from '../DetectionImages';\r\nimport ShelfGeneralInfo from './ShelfGeneralInfo';  \r\nfunction ShelfDocument(props){\r\n    const info = props.object\r\n\r\n    return(\r\n        <Document>\r\n            <Page size=\"A4\" style={Styles.body} >\r\n                <Heading \r\n                    recipient=\"GLANCE AUDITOR\"\r\n                    scanDate={info.scanDate}\r\n                    reportId={info.inputId}\r\n                />\r\n                <Text style={Styles.title} >\r\n                    Shelf No. {info.shelfNumber}\r\n                </Text>\r\n                <ShelfGeneralInfo \r\n                    scanDate={info.scanDate}\r\n                    rowNumbers={info.rowNumber}\r\n                    brandName={info.brandName}\r\n                    storeName={info.storeName}\r\n                    manufacturers={info.manufacturerNames}\r\n                    categoryName={info.categoryName}\r\n                    productNames={info.productNames}\r\n                    numberOfSKUs={info.numberOfSKUs}\r\n                    numberOfFacings={info.numberOfFacings}\r\n                    SKUs = {info.skUs}\r\n                />\r\n                <DetectionImages Image={props.Image} ImagesInfo={info.shelvesImages} labels={props.labels}/>\r\n            </Page>\r\n        </Document>\r\n    );\r\n    \r\n}\r\n\r\nexport default ShelfDocument;","import React, { useState , useEffect, useMemo} from 'react';\r\nimport MyDocument from './ShelfPDFComponents/ShelfDocument';\r\nimport { PDFViewer, PDFDownloadLink} from '@react-pdf/renderer';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport '../Styles/js/Pdf-Font-loader';\r\nimport {\r\n  useParams\r\n} from \"react-router-dom\";\r\nfunction ShelfPDF(props)  {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n    const [images, setImage] = useState([]);\r\n    const [labels, setlabels] = useState([]);\r\n    const  params  = useParams();\r\n    useEffect(() => {\r\n      fetch(`https://glance-api.azurewebsites.net/reportbyshelf/shelfNumber=${params.shelfNumber},inputId=${params.inputId}`)\r\n        .then(res => res.json())\r\n        .then(    \r\n          (result) => {\r\n            setItems(result);\r\n            const Pimages = []\r\n            const colors = []\r\n            // const reducer = (accumulator, currentValue) => accumulator.concat(currentValue.coordinateOnShelf);\r\n            const labels = result.shelvesImages.map(shelf =>  \r\n              shelf.detectedProducts.length\r\n            )\r\n            console.log(labels)\r\n            const renderLabelColor =  labels.map( async label => {\r\n              return await fetch(`http://127.0.0.1:4000/get-colors/${label}`,{\r\n                  method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n                  })\r\n                  // implement body\r\n                  .then(response => response.json())\r\n                    .then(    \r\n                      (response) => {\r\n                         colors.push(response)\r\n                      },\r\n                      (error) => {\r\n                        setError(error);\r\n                        setIsLoaded(false);\r\n                      }\r\n                    )\r\n            });\r\n            console.log(colors)\r\n            const intdata = result.shelvesImages.map( shelf => ({\r\n              imageUrl: shelf.shelfImageUrl , isGrouped: true,\r\n              productCoords: shelf.detectedProducts.map(product => product.coordinateOnShelf)\r\n              \r\n            }\r\n            ) )\r\n            console.log(intdata)\r\n            const requests =  intdata.map( async image => {\r\n              return await fetch(\"http://127.0.0.1:4000/highlight-image\",{\r\n                  method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n                  headers: {\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                  responseType: 'blob',\r\n                  body: JSON.stringify(image) // body data type must match \"Content-Type\" header\r\n                  })\r\n                  // implement body\r\n                  .then(response => response.blob())\r\n                    .then(    \r\n                      (response) => {\r\n                         Pimages.push(response);\r\n                      },\r\n                      (error) => {\r\n                        setError(error);\r\n                        setIsLoaded(false);\r\n                      }\r\n                    )\r\n            });\r\n            return Promise.all(renderLabelColor).then(() => {\r\n              return Promise.all(requests).then(() => {\r\n                console.log(\"Code is here\");\r\n                console.log(Pimages)\r\n                setImage(Pimages)\r\n                setlabels(colors)\r\n                setIsLoaded(true);\r\n              })\r\n            })\r\n          },\r\n          (error) => {\r\n            setError(error);\r\n            setIsLoaded(false);\r\n          }\r\n        )\r\n    }, [])\r\n    \r\n    return ( \r\n      <>\r\n      {isLoaded ?\r\n          <PDFViewer height=\"950px\" width=\"100%\">\r\n              <MyDocument Image={images} object={items} labels={labels}/>\r\n          </PDFViewer>\r\n      : \r\n      \r\n        <Row className=\"d-flex justify-content-center align-items-center\" style={{height:'100%'}}>\r\n          <h1>Generating report...</h1>\r\n        </Row>\r\n      }\r\n      </>\r\n        );\r\n    \r\n}\r\n\r\nexport default ShelfPDF;","import React, { useState } from 'react';\r\nimport './Styles/glance-portal-styling.scss';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PDFView from './Components/PDFView';\r\nimport SideNav from './Components/SideNav';\r\nimport RecordsView from './Components/Pages/RecordsView';\r\nimport AuditList from './Components/Pages/AuditList';\r\nimport './Styles/js/Pdf-Font-loader';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport ShelfList from './Components/Pages/ShelfList';\r\nimport ShelfPDF from './Components/ShelfPDF';\r\nfunction App()  {\r\n  const [page, navigate] = useState(2)\r\n  return ( \r\n    <Router>\r\n          <Switch>\r\n            <Route path=\"/auditor\">\r\n              <div class=\"page-layout\">\r\n                <SideNav />\r\n                <AuditList />\r\n               </div>\r\n            </Route>\r\n            <Route path=\"/manufacturer\">\r\n              <div class=\"page-layout\">\r\n                <SideNav />\r\n                <RecordsView page='home'/>\r\n               </div>\r\n            </Route>\r\n            <Route path=\"/pdf/:reportId\">\r\n              <div class=\"page-layout-pdf\">\r\n                <SideNav />\r\n                <PDFView />\r\n              </div>\r\n            </Route>\r\n            <Route path=\"/shelflist/:inputId\">\r\n              <div class=\"page-layout\">\r\n                <SideNav />\r\n                <ShelfList />\r\n              </div>\r\n            </Route>\r\n            <Route path=\"/shelfpdf/:inputId/:shelfNumber\">\r\n              <div class=\"page-layout-pdf\">\r\n                <SideNav />\r\n                <ShelfPDF />\r\n              </div>\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <div class=\"page-layout\">\r\n                <SideNav />\r\n                <RecordsView page='home'/>\r\n               </div>\r\n            </Route>\r\n            \r\n          </Switch>\r\n      \r\n    </Router>\r\n  );\r\n    \r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\nimport { PDFViewer } from '@react-pdf/renderer';\nimport App from './App';\n\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}